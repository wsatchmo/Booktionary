{"version":3,"sources":["components/Nav/index.js","components/List/index.js","components/Book/index.js","utils/API.js","pages/Home.js","pages/Save.js","pages/None.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","state","open","width","window","innerWidth","updateWidth","newState","setState","toggleNav","addEventListener","this","removeEventListener","className","Link","to","onClick","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","location","pathname","Component","List","children","ListItem","Book","title","authors","link","description","image","Button","Row","Col","size","target","rel","href","src","alt","q","axios","get","params","delete","bookData","post","Home","books","message","handleInputChange","e","name","value","getBooks","API","then","res","data","catch","handleFormSubmit","preventDefault","handleBookSaved","book","find","googleId","volumeInfo","infoLink","imageLinks","thumbnail","Container","Jumbotron","Card","Form","Label","Group","controlId","Control","as","rows","variant","type","length","console","log","map","key","join","Save","getSavedBooks","err","handleBookDelete","Body","_id","None","App","Switch","Route","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.98573902.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\nclass Nav extends Component {\n  state = {\n    open: false,\n    width: window.innerWidth\n  };\n\n  updateWidth = () => {\n    const newState = { width: window.innerWidth };\n\n    if (this.state.open && newState.width > 991) {\n      newState.open = false;\n    }\n\n    this.setState(newState);\n  };\n\n  toggleNav = () => {\n    this.setState({ open: !this.state.open });\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWidth);\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-2\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          Google Books\n        </Link>\n        <button\n          onClick={this.toggleNav}\n          className=\"navbar-toggler\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div className={`${this.state.open ? \"\" : \"collapse \"}navbar-collapse`} id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <Link\n                onClick={this.toggleNav}\n                className={window.location.pathname === \"/\" ? \"nav-link active\" : \"nav-link\"}\n                to=\"/\"\n              >\n                Search\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link\n                onClick={this.toggleNav}\n                className={window.location.pathname === \"/saved\" ? \"nav-link active\" : \"nav-link\"}\n                to=\"/saved\"\n              >\n                Saved\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\n// List, ListItem component. For building unordered lists\nexport const List = ({ children }) => (\n  <ul className=\"list-group\">\n    {children}\n  </ul>\n);\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n","import React from \"react\";\nimport { ListItem } from \"../List\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"./style.css\";\n\nfunction Book({ title, authors, link, description, image, Button }) {\n  return (\n    <ListItem>\n      <Row className=\"flex-wrap-reverse\">\n        <Col size=\"md-8\">\n          <h3 className=\"font-italic\">{title}</h3>\n        </Col>\n        <Col size=\"md-4\">\n          <div className=\"btn-container\">\n            <a className=\"btn btn-light\" target=\"_blank\" rel=\"noopener noreferrer\" href={link}>\n              View\n            </a>\n            <Button />\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col size=\"md-6\">\n          <p className=\"font-italic small\">Written by {authors}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col size=\"12 sm-4 md-2\">\n          <img className=\"img-thumbnail img-fluid w-100\" src={image} alt={title} />\n        </Col>\n        <Col size=\"12 sm-8 md-10\">\n          <p>{description}</p>\n        </Col>\n      </Row>\n    </ListItem>\n  );\n}\n\nexport default Book;\n","import axios from \"axios\";\n\nexport default {\n  // Grab books from Google API based on query\n  getBooks: function(q) {\n    return axios.get(\"/api/google\", { params: { q: \"title:\" + q } });\n  },\n  // Grab all saved books from mongoDB\n  getSavedBooks: function() {\n    return axios.get(\"/api/books\");\n  },\n  // Delete book based on id from mongoDB\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Save book into mongoDB\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  }\n};","import React, {Component} from \"react\";\nimport Book from \"../components/Book\";\nimport API from \"../utils/API\";\nimport {Jumbotron, Card, Form, Row, Col, Container, Button} from \"react-bootstrap\";\nimport {List} from \"../components/List\";\n\nclass Home extends Component {\n    state = {\n        books: [],\n        q: \"\",\n        message: \"Searched books will appear here\"\n    };\n\n    handleInputChange = e => {\n        const {name, value} = e.target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    getBooks = () => {\n        API.getBooks(this.state.q)\n        .then(res =>\n            this.setState({\n                books: res.data\n            })\n        ).catch(()=>\n            this.setState({\n                books: [],\n                message: \"No new books matching. Please search something else\"\n            })\n        );\n    };\n\n    handleFormSubmit = e => {\n        e.preventDefault();\n        this.getBooks();\n    };\n\n    handleBookSaved = id => {\n        let book = this.state.books.find(book => book.id === id);\n\n        API.saveBook({\n            googleId: book.id,\n            title: book.volumeInfo.title,\n            link: book.volumeInfo.infoLink,\n            authors: book.volumeInfo.authors,\n            description: book.volumeInfo.description,\n            image: book.volumeInfo.imageLinks.thumbnail,\n        }).then(()=> this.getBooks());\n    };\n\n    render(){\n        return(\n            <Container>\n                <Row>\n                    <Col size=\"md-12\">\n                        <Jumbotron>\n                            <h1 className=\"text-center\">Booktionary</h1>\n                            <h2 className=\"text-center\">Search and Save books from Google</h2>\n                        </Jumbotron>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col size=\"md-12\">\n                        <Card title=\"Search\">\n                            <Form>\n                                <Form.Label>{this.state.q}</Form.Label>\n                                <Form.Group controlId=\"Form.ControlTextarea1\">\n                                    <Form.Label>Search Books</Form.Label>\n                                    <Form.Control as=\"textarea\" rows=\"1\" handleInputChange={this.handleInputChange}/>\n                                </Form.Group>\n                                <Button variant=\"primary\" type=\"submit\" onClick={this.handleFormSubmit}>\n                                    Submit\n                                </Button>\n                            </Form>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col size=\"md-12\">\n                        <Card title=\"Results\">\n                            {this.state.books.length ? (\n                                <List>\n                                    {console.log(\"this.state::\", this.state)}\n                                    {this.state.books.map(book => (\n                                        <Book\n                                            key={book.id}\n                                            title={book.volumeInfo.title}\n                                            link={book.volumeInfo.infoLink}\n                                            authors={book.volumeInfo.authors.join(\", \")}\n                                            description={book.volumeInfo.description}\n                                            image={book.volumeInfo.imageLinks.thumbnail}\n                                            Button={()=> (\n                                                <button\n                                                    onClick={() => this.handleBookSaved(book.id)}\n                                                    className=\"btn btn-primary\"\n                                                >   Save\n                                                </button>\n                                            )}\n                                        />\n                                    ))}\n                                </List>\n                            ):(\n                                <h3 className=\"text-center\">{this.state.message}</h3>\n                            )}\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n           \n        )\n    }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport {Jumbotron, Card, Row, Col, Container} from \"react-bootstrap\";\nimport {List} from \"../components/List\";\nimport Book from \"../components/Book\";\nimport API from \"../utils/API\";\n\nclass Save extends Component {\n  state = {\n    books: []\n  };\n\n  //Load saved books on mount\n  componentDidMount() {\n    this.getSavedBooks();\n  }\n\n  //Load saved books\n  getSavedBooks = () => {\n    API.getSavedBooks()\n      .then(res =>\n        this.setState({\n          books: res.data\n        })\n      )\n      .catch(err => console.log(err));\n  };\n\n  //Delete books from saved list\n  handleBookDelete = id => {\n    API.deleteBook(id).then(res => this.getSavedBooks());\n  };\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col size=\"md-12\">\n            <Jumbotron>\n                <h1 className=\"text-center\">Booktionary</h1>\n                <h2 className=\"text-center\">Search and Save books from Google</h2>\n            </Jumbotron>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-12\">\n            <Card title=\"Saved Books\">\n              <Card.Body>\n                {this.state.books.length ? (\n                  <List>\n                    {this.state.books.map(book => (\n                      <Book\n                        key={book._id}\n                        title={book.title}\n                        link={book.link}\n                        authors={book.authors.join(\", \")}\n                        description={book.description}\n                        image={book.image}\n                        Button={() => (\n                          <button\n                            onClick={() => this.handleBookDelete(book._id)}\n                            className=\"btn btn-danger ml-2\"\n                          >\n                            Delete\n                          </button>\n                        )}\n                      />\n                    ))}\n                  </List>\n                ) : (\n                  <h2 className=\"text-center\">No Saved Books</h2>\n                )}\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    \n    );\n  }\n}\n\nexport default Save;","import React from \"react\";\nimport {Col, Row, Jumbotron} from \"react-bootstrap\";\n\nfunction None() {\n  return (\n \n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1 className=\"text-center\">404 Page Not Found</h1>\n            <h3 className=\"text-center\">\n                Sorry, page does not exist. Please go back \n            </h3>\n          </Jumbotron>\n        </Col>\n      </Row>\n \n  );\n}\n\nexport default None;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Nav from \"./components/Nav\";\nimport Home from \"./pages/Home\";\nimport Save from \"./pages/Save\";\nimport None from \"./pages/None\";\n\nfunction App(){\n    return(\n        <Router>\n            <div>\n                <Nav/>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/save\" component={Save} />\n                    <Route component={None} />\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();"],"sourceRoot":""}